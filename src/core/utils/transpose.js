// src/core/utils/transpose.js

/**
 * –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç ¬´–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫¬ª –≤ ¬´–æ–±—ä–µ–∫—Ç –∫–æ–ª–æ–Ω–æ–∫¬ª.
 *
 * –ü—Ä–∏–º–µ—Ä:
 *   const rows = [
 *     { a: 1, b: 2 },
 *     { a: 3, b: 4 }
 *   ];
 *   transpose(rows);
 *   // üëâ { a: [1, 3], b: [2, 4] }
 *
 * ‚ö†Ô∏è  –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π.
 *
 * @template T extends Record<string, any>
 * @param {T[]} rows  –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-—Å—Ç—Ä–æ–∫
 * @returns {Record<keyof T, any[]>}  –û–±—ä–µ–∫—Ç ‚Äú–∫–æ–ª–æ–Ω–∫–∞ ‚Üí –º–∞—Å—Å–∏–≤‚Äù
 */
export function transpose(rows) {
  if (!Array.isArray(rows) || rows.length === 0) {
    throw new Error('transpose(): input must be a non-empty array of objects');
  }

  const keys = Object.keys(rows[0]);
  const out = {};

  for (const k of keys) out[k] = new Array(rows.length);

  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    for (const k of keys) out[k][i] = row[k];
  }

  return out;
}
